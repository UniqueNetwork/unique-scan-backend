{
  "unique": {
    "types": {},
    "rpc": {
      "adminlist": {
        "description": "Get admin list",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<PalletEvmAccountBasicCrossAccountIdRepr>"
      },
      "allowlist": {
        "description": "Get allowlist",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<PalletEvmAccountBasicCrossAccountIdRepr>"
      },
      "accountTokens": {
        "description": "Get tokens owned by account",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "account",
            "type": "PalletEvmAccountBasicCrossAccountIdRepr"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<u32>"
      },
      "collectionTokens": {
        "description": "Get tokens contained in collection",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<u32>"
      },
      "lastTokenId": {
        "description": "Get last token id",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "u32"
      },
      "totalSupply": {
        "description": "Get amount of unique collection tokens",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "u32"
      },
      "accountBalance": {
        "description": "Get amount of different user tokens",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "account",
            "type": "PalletEvmAccountBasicCrossAccountIdRepr"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "u32"
      },
      "balance": {
        "description": "Get amount of specific account token",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "account",
            "type": "PalletEvmAccountBasicCrossAccountIdRepr"
          },
          {
            "name": "tokenId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "u128"
      },
      "allowance": {
        "description": "Get allowed amount",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "sender",
            "type": "PalletEvmAccountBasicCrossAccountIdRepr"
          },
          {
            "name": "spender",
            "type": "PalletEvmAccountBasicCrossAccountIdRepr"
          },
          {
            "name": "tokenId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "u128"
      },
      "tokenOwner": {
        "description": "Get token owner",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "tokenId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Option<PalletEvmAccountBasicCrossAccountIdRepr>"
      },
      "topmostTokenOwner": {
        "description": "Get token owner, in case of nested token - find parent recursive",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "tokenId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Option<PalletEvmAccountBasicCrossAccountIdRepr>"
      },
      "tokenChildren": {
        "description": "Get tokens nested directly into the token",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "tokenId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<UpDataStructsTokenChild>"
      },
      "constMetadata": {
        "description": "Get token constant metadata",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "tokenId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<u8>"
      },
      "variableMetadata": {
        "description": "Get token variable metadata",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "tokenId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<u8>"
      },
      "collectionProperties": {
        "description": "Get collection properties",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "propertyKeys",
            "type": "Vec<String>",
            "isOptional": true
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<UpDataStructsProperty>"
      },
      "tokenProperties": {
        "description": "Get token properties",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "tokenId",
            "type": "u32"
          },
          {
            "name": "propertyKeys",
            "type": "Vec<String>",
            "isOptional": true
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<UpDataStructsProperty>"
      },
      "propertyPermissions": {
        "description": "Get property permissions",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "propertyKeys",
            "type": "Vec<String>",
            "isOptional": true
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<UpDataStructsPropertyKeyPermission>"
      },
      "tokenData": {
        "description": "Get token data",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "tokenId",
            "type": "u32"
          },
          {
            "name": "propertyKeys",
            "type": "Vec<String>",
            "isOptional": true
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "UpDataStructsTokenData"
      },
      "tokenExists": {
        "description": "Check if token exists",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "tokenId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "bool"
      },
      "collectionById": {
        "description": "Get collection by specified id",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Option<UpDataStructsRpcCollection>"
      },
      "collectionStats": {
        "description": "Get collection stats",
        "params": [
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "UpDataStructsCollectionStats"
      },
      "allowed": {
        "description": "Check if user is allowed to use collection",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "account",
            "type": "PalletEvmAccountBasicCrossAccountIdRepr"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "bool"
      },
      "nextSponsored": {
        "description": "Get number of blocks when sponsored transaction is available",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "account",
            "type": "PalletEvmAccountBasicCrossAccountIdRepr"
          },
          {
            "name": "tokenId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Option<u64>"
      },
      "effectiveCollectionLimits": {
        "description": "Get effective collection limits",
        "params": [
          {
            "name": "collection",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Option<UpDataStructsCollectionLimits>"
      }
    }
  },
  "rmrk": {
    "types": {},
    "rpc": {
      "lastCollectionIdx": {
        "description": "Get the latest created collection id",
        "params": [
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "u32"
      },
      "collectionById": {
        "description": "Get collection by id",
        "params": [
          {
            "name": "id",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Option<RmrkTraitsCollectionCollectionInfo>"
      },
      "nftById": {
        "description": "Get NFT by collection id and NFT id",
        "params": [
          {
            "name": "collectionId",
            "type": "u32"
          },
          {
            "name": "nftId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Option<RmrkTraitsNftNftInfo>"
      },
      "accountTokens": {
        "description": "Get tokens owned by an account in a collection",
        "params": [
          {
            "name": "accountId",
            "type": "AccountId32"
          },
          {
            "name": "collectionId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<u32>"
      },
      "nftChildren": {
        "description": "Get NFT children",
        "params": [
          {
            "name": "collectionId",
            "type": "u32"
          },
          {
            "name": "nftId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<RmrkTraitsNftNftChild>"
      },
      "collectionProperties": {
        "description": "Get collection properties",
        "params": [
          {
            "name": "collectionId",
            "type": "u32"
          },
          {
            "name": "filterKeys",
            "type": "Vec<String>",
            "isOptional": true
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<RmrkTraitsPropertyPropertyInfo>"
      },
      "nftProperties": {
        "description": "Get NFT properties",
        "params": [
          {
            "name": "collectionId",
            "type": "u32"
          },
          {
            "name": "nftId",
            "type": "u32"
          },
          {
            "name": "filterKeys",
            "type": "Vec<String>",
            "isOptional": true
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<RmrkTraitsPropertyPropertyInfo>"
      },
      "nftResources": {
        "description": "Get NFT resources",
        "params": [
          {
            "name": "collectionId",
            "type": "u32"
          },
          {
            "name": "nftId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<RmrkTraitsResourceResourceInfo>"
      },
      "nftResourcePriority": {
        "description": "Get NFT resource priorities",
        "params": [
          {
            "name": "collectionId",
            "type": "u32"
          },
          {
            "name": "nftId",
            "type": "u32"
          },
          {
            "name": "resourceId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Option<u32>"
      },
      "base": {
        "description": "Get base info",
        "params": [
          {
            "name": "baseId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Option<RmrkTraitsBaseBaseInfo>"
      },
      "baseParts": {
        "description": "Get all Base's parts",
        "params": [
          {
            "name": "baseId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<RmrkTraitsPartPartType>"
      },
      "themeNames": {
        "description": "Get Base's theme names",
        "params": [
          {
            "name": "baseId",
            "type": "u32"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<Bytes>"
      },
      "themes": {
        "description": "Get Theme's keys values",
        "params": [
          {
            "name": "baseId",
            "type": "u32"
          },
          {
            "name": "themeName",
            "type": "String"
          },
          {
            "name": "keys",
            "type": "Option<Vec<String>>"
          },
          {
            "name": "at",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Option<RmrkTraitsTheme>"
      }
    }
  },
  "default": {
    "types": {
      "PolkadotPrimitivesV2PersistedValidationData": {
        "parentHead": "Bytes",
        "relayParentNumber": "u32",
        "relayParentStorageRoot": "H256",
        "maxPovSize": "u32"
      },
      "PolkadotPrimitivesV2UpgradeRestriction": {
        "_enum": [
          "Present"
        ]
      },
      "SpTrieStorageProof": {
        "trieNodes": "BTreeSet<Bytes>"
      },
      "CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot": {
        "dmqMqcHead": "H256",
        "relayDispatchQueueSize": "(u32,u32)",
        "ingressChannels": "Vec<(u32,PolkadotPrimitivesV2AbridgedHrmpChannel)>",
        "egressChannels": "Vec<(u32,PolkadotPrimitivesV2AbridgedHrmpChannel)>"
      },
      "PolkadotPrimitivesV2AbridgedHrmpChannel": {
        "maxCapacity": "u32",
        "maxTotalSize": "u32",
        "maxMessageSize": "u32",
        "msgCount": "u32",
        "totalSize": "u32",
        "mqcHead": "Option<H256>"
      },
      "PolkadotPrimitivesV2AbridgedHostConfiguration": {
        "maxCodeSize": "u32",
        "maxHeadDataSize": "u32",
        "maxUpwardQueueCount": "u32",
        "maxUpwardQueueSize": "u32",
        "maxUpwardMessageSize": "u32",
        "maxUpwardMessageNumPerCandidate": "u32",
        "hrmpMaxMessageNumPerCandidate": "u32",
        "validationUpgradeCooldown": "u32",
        "validationUpgradeDelay": "u32"
      },
      "PolkadotCorePrimitivesOutboundHrmpMessage": {
        "recipient": "u32",
        "data": "Bytes"
      },
      "CumulusPalletParachainSystemCall": {
        "_enum": {
          "set_validation_data": {
            "data": "CumulusPrimitivesParachainInherentParachainInherentData"
          },
          "sudo_send_upward_message": {
            "message": "Bytes"
          },
          "authorize_upgrade": {
            "codeHash": "H256"
          },
          "enact_authorized_upgrade": {
            "code": "Bytes"
          }
        }
      },
      "CumulusPrimitivesParachainInherentParachainInherentData": {
        "validationData": "PolkadotPrimitivesV2PersistedValidationData",
        "relayChainState": "SpTrieStorageProof",
        "downwardMessages": "Vec<PolkadotCorePrimitivesInboundDownwardMessage>",
        "horizontalMessages": "BTreeMap<u32, Vec<PolkadotCorePrimitivesInboundHrmpMessage>>"
      },
      "PolkadotCorePrimitivesInboundDownwardMessage": {
        "sentAt": "u32",
        "msg": "Bytes"
      },
      "PolkadotCorePrimitivesInboundHrmpMessage": {
        "sentAt": "u32",
        "data": "Bytes"
      },
      "CumulusPalletParachainSystemEvent": {
        "_enum": {
          "ValidationFunctionStored": "Null",
          "ValidationFunctionApplied": {
            "relayChainBlockNum": "u32"
          },
          "ValidationFunctionDiscarded": "Null",
          "UpgradeAuthorized": {
            "codeHash": "H256"
          },
          "DownwardMessagesReceived": {
            "count": "u32"
          },
          "DownwardMessagesProcessed": {
            "weightUsed": "u64",
            "dmqHead": "H256"
          }
        }
      },
      "CumulusPalletParachainSystemError": {
        "_enum": [
          "OverlappingUpgrades",
          "ProhibitedByPolkadot",
          "TooBig",
          "ValidationDataNotAvailable",
          "HostConfigurationNotAvailable",
          "NotScheduled",
          "NothingAuthorized",
          "Unauthorized"
        ]
      },
      "PalletBalancesAccountData": {
        "free": "u128",
        "reserved": "u128",
        "miscFrozen": "u128",
        "feeFrozen": "u128"
      },
      "PalletBalancesBalanceLock": {
        "id": "[u8;8]",
        "amount": "u128",
        "reasons": "PalletBalancesReasons"
      },
      "PalletBalancesReasons": {
        "_enum": [
          "Fee",
          "Misc",
          "All"
        ]
      },
      "PalletBalancesReserveData": {
        "id": "[u8;16]",
        "amount": "u128"
      },
      "PalletBalancesReleases": {
        "_enum": [
          "V1_0_0",
          "V2_0_0"
        ]
      },
      "PalletBalancesCall": {
        "_enum": {
          "transfer": {
            "dest": "MultiAddress",
            "value": "Compact<u128>"
          },
          "set_balance": {
            "who": "MultiAddress",
            "newFree": "Compact<u128>",
            "newReserved": "Compact<u128>"
          },
          "force_transfer": {
            "source": "MultiAddress",
            "dest": "MultiAddress",
            "value": "Compact<u128>"
          },
          "transfer_keep_alive": {
            "dest": "MultiAddress",
            "value": "Compact<u128>"
          },
          "transfer_all": {
            "dest": "MultiAddress",
            "keepAlive": "bool"
          },
          "force_unreserve": {
            "who": "MultiAddress",
            "amount": "u128"
          }
        }
      },
      "PalletBalancesEvent": {
        "_enum": {
          "Endowed": {
            "account": "AccountId32",
            "freeBalance": "u128"
          },
          "DustLost": {
            "account": "AccountId32",
            "amount": "u128"
          },
          "Transfer": {
            "from": "AccountId32",
            "to": "AccountId32",
            "amount": "u128"
          },
          "BalanceSet": {
            "who": "AccountId32",
            "free": "u128",
            "reserved": "u128"
          },
          "Reserved": {
            "who": "AccountId32",
            "amount": "u128"
          },
          "Unreserved": {
            "who": "AccountId32",
            "amount": "u128"
          },
          "ReserveRepatriated": {
            "from": "AccountId32",
            "to": "AccountId32",
            "amount": "u128",
            "destinationStatus": "FrameSupportTokensMiscBalanceStatus"
          },
          "Deposit": {
            "who": "AccountId32",
            "amount": "u128"
          },
          "Withdraw": {
            "who": "AccountId32",
            "amount": "u128"
          },
          "Slashed": {
            "who": "AccountId32",
            "amount": "u128"
          }
        }
      },
      "FrameSupportTokensMiscBalanceStatus": {
        "_enum": [
          "Free",
          "Reserved"
        ]
      },
      "PalletBalancesError": {
        "_enum": [
          "VestingBalance",
          "LiquidityRestrictions",
          "InsufficientBalance",
          "ExistentialDeposit",
          "KeepAlive",
          "ExistingVestingSchedule",
          "DeadAccount",
          "TooManyReserves"
        ]
      },
      "PalletTimestampCall": {
        "_enum": {
          "set": {
            "now": "Compact<u64>"
          }
        }
      },
      "PalletTransactionPaymentReleases": {
        "_enum": [
          "V1Ancient",
          "V2"
        ]
      },
      "PalletTreasuryProposal": {
        "proposer": "AccountId32",
        "value": "u128",
        "beneficiary": "AccountId32",
        "bond": "u128"
      },
      "PalletTreasuryCall": {
        "_enum": {
          "propose_spend": {
            "value": "Compact<u128>",
            "beneficiary": "MultiAddress"
          },
          "reject_proposal": {
            "proposalId": "Compact<u32>"
          },
          "approve_proposal": {
            "proposalId": "Compact<u32>"
          },
          "remove_approval": {
            "proposalId": "Compact<u32>"
          }
        }
      },
      "PalletTreasuryEvent": {
        "_enum": {
          "Proposed": {
            "proposalIndex": "u32"
          },
          "Spending": {
            "budgetRemaining": "u128"
          },
          "Awarded": {
            "proposalIndex": "u32",
            "award": "u128",
            "account": "AccountId32"
          },
          "Rejected": {
            "proposalIndex": "u32",
            "slashed": "u128"
          },
          "Burnt": {
            "burntFunds": "u128"
          },
          "Rollover": {
            "rolloverBalance": "u128"
          },
          "Deposit": {
            "value": "u128"
          }
        }
      },
      "FrameSupportPalletId": "[u8;8]",
      "PalletTreasuryError": {
        "_enum": [
          "InsufficientProposersBalance",
          "InvalidIndex",
          "TooManyApprovals",
          "ProposalNotApproved"
        ]
      },
      "PalletSudoCall": {
        "_enum": {
          "sudo": {
            "call": "Call"
          },
          "sudo_unchecked_weight": {
            "call": "Call",
            "weight": "u64"
          },
          "set_key": {
            "_alias": {
              "new_": "new"
            },
            "new_": "MultiAddress"
          },
          "sudo_as": {
            "who": "MultiAddress",
            "call": "Call"
          }
        }
      },
      "FrameSystemCall": {
        "_enum": {
          "fill_block": {
            "ratio": "Perbill"
          },
          "remark": {
            "remark": "Bytes"
          },
          "set_heap_pages": {
            "pages": "u64"
          },
          "set_code": {
            "code": "Bytes"
          },
          "set_code_without_checks": {
            "code": "Bytes"
          },
          "set_storage": {
            "items": "Vec<(Bytes,Bytes)>"
          },
          "kill_storage": {
            "_alias": {
              "keys_": "keys"
            },
            "keys_": "Vec<Bytes>"
          },
          "kill_prefix": {
            "prefix": "Bytes",
            "subkeys": "u32"
          },
          "remark_with_event": {
            "remark": "Bytes"
          }
        }
      },
      "OrmlVestingModuleCall": {
        "_enum": {
          "claim": "Null",
          "vested_transfer": {
            "dest": "MultiAddress",
            "schedule": "OrmlVestingVestingSchedule"
          },
          "update_vesting_schedules": {
            "who": "MultiAddress",
            "vestingSchedules": "Vec<OrmlVestingVestingSchedule>"
          },
          "claim_for": {
            "dest": "MultiAddress"
          }
        }
      },
      "OrmlVestingVestingSchedule": {
        "start": "u32",
        "period": "u32",
        "periodCount": "u32",
        "perPeriod": "Compact<u128>"
      },
      "CumulusPalletXcmpQueueCall": {
        "_enum": {
          "service_overweight": {
            "index": "u64",
            "weightLimit": "u64"
          },
          "suspend_xcm_execution": "Null",
          "resume_xcm_execution": "Null",
          "update_suspend_threshold": {
            "_alias": {
              "new_": "new"
            },
            "new_": "u32"
          },
          "update_drop_threshold": {
            "_alias": {
              "new_": "new"
            },
            "new_": "u32"
          },
          "update_resume_threshold": {
            "_alias": {
              "new_": "new"
            },
            "new_": "u32"
          },
          "update_threshold_weight": {
            "_alias": {
              "new_": "new"
            },
            "new_": "u64"
          },
          "update_weight_restrict_decay": {
            "_alias": {
              "new_": "new"
            },
            "new_": "u64"
          },
          "update_xcmp_max_individual_weight": {
            "_alias": {
              "new_": "new"
            },
            "new_": "u64"
          }
        }
      },
      "PalletXcmCall": {
        "_enum": {
          "send": {
            "dest": "XcmVersionedMultiLocation",
            "message": "XcmVersionedXcm"
          },
          "teleport_assets": {
            "dest": "XcmVersionedMultiLocation",
            "beneficiary": "XcmVersionedMultiLocation",
            "assets": "XcmVersionedMultiAssets",
            "feeAssetItem": "u32"
          },
          "reserve_transfer_assets": {
            "dest": "XcmVersionedMultiLocation",
            "beneficiary": "XcmVersionedMultiLocation",
            "assets": "XcmVersionedMultiAssets",
            "feeAssetItem": "u32"
          },
          "execute": {
            "message": "XcmVersionedXcm",
            "maxWeight": "u64"
          },
          "force_xcm_version": {
            "location": "XcmV1MultiLocation",
            "xcmVersion": "u32"
          },
          "force_default_xcm_version": {
            "maybeXcmVersion": "Option<u32>"
          },
          "force_subscribe_version_notify": {
            "location": "XcmVersionedMultiLocation"
          },
          "force_unsubscribe_version_notify": {
            "location": "XcmVersionedMultiLocation"
          },
          "limited_reserve_transfer_assets": {
            "dest": "XcmVersionedMultiLocation",
            "beneficiary": "XcmVersionedMultiLocation",
            "assets": "XcmVersionedMultiAssets",
            "feeAssetItem": "u32",
            "weightLimit": "XcmV2WeightLimit"
          },
          "limited_teleport_assets": {
            "dest": "XcmVersionedMultiLocation",
            "beneficiary": "XcmVersionedMultiLocation",
            "assets": "XcmVersionedMultiAssets",
            "feeAssetItem": "u32",
            "weightLimit": "XcmV2WeightLimit"
          }
        }
      },
      "XcmVersionedMultiLocation": {
        "_enum": {
          "V0": "XcmV0MultiLocation",
          "V1": "XcmV1MultiLocation"
        }
      },
      "XcmV0MultiLocation": {
        "_enum": {
          "Null": "Null",
          "X1": "XcmV0Junction",
          "X2": "(XcmV0Junction,XcmV0Junction)",
          "X3": "(XcmV0Junction,XcmV0Junction,XcmV0Junction)",
          "X4": "(XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction)",
          "X5": "(XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction)",
          "X6": "(XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction)",
          "X7": "(XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction)",
          "X8": "(XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction,XcmV0Junction)"
        }
      },
      "XcmV0Junction": {
        "_enum": {
          "Parent": "Null",
          "Parachain": "Compact<u32>",
          "AccountId32": {
            "network": "XcmV0JunctionNetworkId",
            "id": "[u8;32]"
          },
          "AccountIndex64": {
            "network": "XcmV0JunctionNetworkId",
            "index": "Compact<u64>"
          },
          "AccountKey20": {
            "network": "XcmV0JunctionNetworkId",
            "key": "[u8;20]"
          },
          "PalletInstance": "u8",
          "GeneralIndex": "Compact<u128>",
          "GeneralKey": "Bytes",
          "OnlyChild": "Null",
          "Plurality": {
            "id": "XcmV0JunctionBodyId",
            "part": "XcmV0JunctionBodyPart"
          }
        }
      },
      "XcmV0JunctionNetworkId": {
        "_enum": {
          "Any": "Null",
          "Named": "Bytes",
          "Polkadot": "Null",
          "Kusama": "Null"
        }
      },
      "XcmV0JunctionBodyId": {
        "_enum": {
          "Unit": "Null",
          "Named": "Bytes",
          "Index": "Compact<u32>",
          "Executive": "Null",
          "Technical": "Null",
          "Legislative": "Null",
          "Judicial": "Null"
        }
      },
      "XcmV0JunctionBodyPart": {
        "_enum": {
          "Voice": "Null",
          "Members": {
            "count": "Compact<u32>"
          },
          "Fraction": {
            "nom": "Compact<u32>",
            "denom": "Compact<u32>"
          },
          "AtLeastProportion": {
            "nom": "Compact<u32>",
            "denom": "Compact<u32>"
          },
          "MoreThanProportion": {
            "nom": "Compact<u32>",
            "denom": "Compact<u32>"
          }
        }
      },
      "XcmV1MultiLocation": {
        "parents": "u8",
        "interior": "XcmV1MultilocationJunctions"
      },
      "XcmV1MultilocationJunctions": {
        "_enum": {
          "Here": "Null",
          "X1": "XcmV1Junction",
          "X2": "(XcmV1Junction,XcmV1Junction)",
          "X3": "(XcmV1Junction,XcmV1Junction,XcmV1Junction)",
          "X4": "(XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction)",
          "X5": "(XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction)",
          "X6": "(XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction)",
          "X7": "(XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction)",
          "X8": "(XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction,XcmV1Junction)"
        }
      },
      "XcmV1Junction": {
        "_enum": {
          "Parachain": "Compact<u32>",
          "AccountId32": {
            "network": "XcmV0JunctionNetworkId",
            "id": "[u8;32]"
          },
          "AccountIndex64": {
            "network": "XcmV0JunctionNetworkId",
            "index": "Compact<u64>"
          },
          "AccountKey20": {
            "network": "XcmV0JunctionNetworkId",
            "key": "[u8;20]"
          },
          "PalletInstance": "u8",
          "GeneralIndex": "Compact<u128>",
          "GeneralKey": "Bytes",
          "OnlyChild": "Null",
          "Plurality": {
            "id": "XcmV0JunctionBodyId",
            "part": "XcmV0JunctionBodyPart"
          }
        }
      },
      "XcmVersionedXcm": {
        "_enum": {
          "V0": "XcmV0Xcm",
          "V1": "XcmV1Xcm",
          "V2": "XcmV2Xcm"
        }
      },
      "XcmV0Xcm": {
        "_enum": {
          "WithdrawAsset": {
            "assets": "Vec<XcmV0MultiAsset>",
            "effects": "Vec<XcmV0Order>"
          },
          "ReserveAssetDeposit": {
            "assets": "Vec<XcmV0MultiAsset>",
            "effects": "Vec<XcmV0Order>"
          },
          "TeleportAsset": {
            "assets": "Vec<XcmV0MultiAsset>",
            "effects": "Vec<XcmV0Order>"
          },
          "QueryResponse": {
            "queryId": "Compact<u64>",
            "response": "XcmV0Response"
          },
          "TransferAsset": {
            "assets": "Vec<XcmV0MultiAsset>",
            "dest": "XcmV0MultiLocation"
          },
          "TransferReserveAsset": {
            "assets": "Vec<XcmV0MultiAsset>",
            "dest": "XcmV0MultiLocation",
            "effects": "Vec<XcmV0Order>"
          },
          "Transact": {
            "originType": "XcmV0OriginKind",
            "requireWeightAtMost": "u64",
            "call": "XcmDoubleEncoded"
          },
          "HrmpNewChannelOpenRequest": {
            "sender": "Compact<u32>",
            "maxMessageSize": "Compact<u32>",
            "maxCapacity": "Compact<u32>"
          },
          "HrmpChannelAccepted": {
            "recipient": "Compact<u32>"
          },
          "HrmpChannelClosing": {
            "initiator": "Compact<u32>",
            "sender": "Compact<u32>",
            "recipient": "Compact<u32>"
          },
          "RelayedFrom": {
            "who": "XcmV0MultiLocation",
            "message": "XcmV0Xcm"
          }
        }
      },
      "XcmV0MultiAsset": {
        "_enum": {
          "None": "Null",
          "All": "Null",
          "AllFungible": "Null",
          "AllNonFungible": "Null",
          "AllAbstractFungible": {
            "id": "Bytes"
          },
          "AllAbstractNonFungible": {
            "class": "Bytes"
          },
          "AllConcreteFungible": {
            "id": "XcmV0MultiLocation"
          },
          "AllConcreteNonFungible": {
            "class": "XcmV0MultiLocation"
          },
          "AbstractFungible": {
            "id": "Bytes",
            "amount": "Compact<u128>"
          },
          "AbstractNonFungible": {
            "class": "Bytes",
            "instance": "XcmV1MultiassetAssetInstance"
          },
          "ConcreteFungible": {
            "id": "XcmV0MultiLocation",
            "amount": "Compact<u128>"
          },
          "ConcreteNonFungible": {
            "class": "XcmV0MultiLocation",
            "instance": "XcmV1MultiassetAssetInstance"
          }
        }
      },
      "XcmV1MultiassetAssetInstance": {
        "_enum": {
          "Undefined": "Null",
          "Index": "Compact<u128>",
          "Array4": "[u8;4]",
          "Array8": "[u8;8]",
          "Array16": "[u8;16]",
          "Array32": "[u8;32]",
          "Blob": "Bytes"
        }
      },
      "XcmV0Order": {
        "_enum": {
          "Null": "Null",
          "DepositAsset": {
            "assets": "Vec<XcmV0MultiAsset>",
            "dest": "XcmV0MultiLocation"
          },
          "DepositReserveAsset": {
            "assets": "Vec<XcmV0MultiAsset>",
            "dest": "XcmV0MultiLocation",
            "effects": "Vec<XcmV0Order>"
          },
          "ExchangeAsset": {
            "give": "Vec<XcmV0MultiAsset>",
            "receive": "Vec<XcmV0MultiAsset>"
          },
          "InitiateReserveWithdraw": {
            "assets": "Vec<XcmV0MultiAsset>",
            "reserve": "XcmV0MultiLocation",
            "effects": "Vec<XcmV0Order>"
          },
          "InitiateTeleport": {
            "assets": "Vec<XcmV0MultiAsset>",
            "dest": "XcmV0MultiLocation",
            "effects": "Vec<XcmV0Order>"
          },
          "QueryHolding": {
            "queryId": "Compact<u64>",
            "dest": "XcmV0MultiLocation",
            "assets": "Vec<XcmV0MultiAsset>"
          },
          "BuyExecution": {
            "fees": "XcmV0MultiAsset",
            "weight": "u64",
            "debt": "u64",
            "haltOnError": "bool",
            "xcm": "Vec<XcmV0Xcm>"
          }
        }
      },
      "XcmV0Response": {
        "_enum": {
          "Assets": "Vec<XcmV0MultiAsset>"
        }
      },
      "XcmV0OriginKind": {
        "_enum": [
          "Native",
          "SovereignAccount",
          "Superuser",
          "Xcm"
        ]
      },
      "XcmDoubleEncoded": {
        "encoded": "Bytes"
      },
      "XcmV1Xcm": {
        "_enum": {
          "WithdrawAsset": {
            "assets": "XcmV1MultiassetMultiAssets",
            "effects": "Vec<XcmV1Order>"
          },
          "ReserveAssetDeposited": {
            "assets": "XcmV1MultiassetMultiAssets",
            "effects": "Vec<XcmV1Order>"
          },
          "ReceiveTeleportedAsset": {
            "assets": "XcmV1MultiassetMultiAssets",
            "effects": "Vec<XcmV1Order>"
          },
          "QueryResponse": {
            "queryId": "Compact<u64>",
            "response": "XcmV1Response"
          },
          "TransferAsset": {
            "assets": "XcmV1MultiassetMultiAssets",
            "beneficiary": "XcmV1MultiLocation"
          },
          "TransferReserveAsset": {
            "assets": "XcmV1MultiassetMultiAssets",
            "dest": "XcmV1MultiLocation",
            "effects": "Vec<XcmV1Order>"
          },
          "Transact": {
            "originType": "XcmV0OriginKind",
            "requireWeightAtMost": "u64",
            "call": "XcmDoubleEncoded"
          },
          "HrmpNewChannelOpenRequest": {
            "sender": "Compact<u32>",
            "maxMessageSize": "Compact<u32>",
            "maxCapacity": "Compact<u32>"
          },
          "HrmpChannelAccepted": {
            "recipient": "Compact<u32>"
          },
          "HrmpChannelClosing": {
            "initiator": "Compact<u32>",
            "sender": "Compact<u32>",
            "recipient": "Compact<u32>"
          },
          "RelayedFrom": {
            "who": "XcmV1MultilocationJunctions",
            "message": "XcmV1Xcm"
          },
          "SubscribeVersion": {
            "queryId": "Compact<u64>",
            "maxResponseWeight": "Compact<u64>"
          },
          "UnsubscribeVersion": "Null"
        }
      },
      "XcmV1MultiassetMultiAssets": "Vec<XcmV1MultiAsset>",
      "XcmV1MultiAsset": {
        "id": "XcmV1MultiassetAssetId",
        "fun": "XcmV1MultiassetFungibility"
      },
      "XcmV1MultiassetAssetId": {
        "_enum": {
          "Concrete": "XcmV1MultiLocation",
          "Abstract": "Bytes"
        }
      },
      "XcmV1MultiassetFungibility": {
        "_enum": {
          "Fungible": "Compact<u128>",
          "NonFungible": "XcmV1MultiassetAssetInstance"
        }
      },
      "XcmV1Order": {
        "_enum": {
          "Noop": "Null",
          "DepositAsset": {
            "assets": "XcmV1MultiassetMultiAssetFilter",
            "maxAssets": "u32",
            "beneficiary": "XcmV1MultiLocation"
          },
          "DepositReserveAsset": {
            "assets": "XcmV1MultiassetMultiAssetFilter",
            "maxAssets": "u32",
            "dest": "XcmV1MultiLocation",
            "effects": "Vec<XcmV1Order>"
          },
          "ExchangeAsset": {
            "give": "XcmV1MultiassetMultiAssetFilter",
            "receive": "XcmV1MultiassetMultiAssets"
          },
          "InitiateReserveWithdraw": {
            "assets": "XcmV1MultiassetMultiAssetFilter",
            "reserve": "XcmV1MultiLocation",
            "effects": "Vec<XcmV1Order>"
          },
          "InitiateTeleport": {
            "assets": "XcmV1MultiassetMultiAssetFilter",
            "dest": "XcmV1MultiLocation",
            "effects": "Vec<XcmV1Order>"
          },
          "QueryHolding": {
            "queryId": "Compact<u64>",
            "dest": "XcmV1MultiLocation",
            "assets": "XcmV1MultiassetMultiAssetFilter"
          },
          "BuyExecution": {
            "fees": "XcmV1MultiAsset",
            "weight": "u64",
            "debt": "u64",
            "haltOnError": "bool",
            "instructions": "Vec<XcmV1Xcm>"
          }
        }
      },
      "XcmV1MultiassetMultiAssetFilter": {
        "_enum": {
          "Definite": "XcmV1MultiassetMultiAssets",
          "Wild": "XcmV1MultiassetWildMultiAsset"
        }
      },
      "XcmV1MultiassetWildMultiAsset": {
        "_enum": {
          "All": "Null",
          "AllOf": {
            "id": "XcmV1MultiassetAssetId",
            "fun": "XcmV1MultiassetWildFungibility"
          }
        }
      },
      "XcmV1MultiassetWildFungibility": {
        "_enum": [
          "Fungible",
          "NonFungible"
        ]
      },
      "XcmV1Response": {
        "_enum": {
          "Assets": "XcmV1MultiassetMultiAssets",
          "Version": "u32"
        }
      },
      "XcmV2Xcm": "Vec<XcmV2Instruction>",
      "XcmV2Instruction": {
        "_enum": {
          "WithdrawAsset": "XcmV1MultiassetMultiAssets",
          "ReserveAssetDeposited": "XcmV1MultiassetMultiAssets",
          "ReceiveTeleportedAsset": "XcmV1MultiassetMultiAssets",
          "QueryResponse": {
            "queryId": "Compact<u64>",
            "response": "XcmV2Response",
            "maxWeight": "Compact<u64>"
          },
          "TransferAsset": {
            "assets": "XcmV1MultiassetMultiAssets",
            "beneficiary": "XcmV1MultiLocation"
          },
          "TransferReserveAsset": {
            "assets": "XcmV1MultiassetMultiAssets",
            "dest": "XcmV1MultiLocation",
            "xcm": "XcmV2Xcm"
          },
          "Transact": {
            "originType": "XcmV0OriginKind",
            "requireWeightAtMost": "Compact<u64>",
            "call": "XcmDoubleEncoded"
          },
          "HrmpNewChannelOpenRequest": {
            "sender": "Compact<u32>",
            "maxMessageSize": "Compact<u32>",
            "maxCapacity": "Compact<u32>"
          },
          "HrmpChannelAccepted": {
            "recipient": "Compact<u32>"
          },
          "HrmpChannelClosing": {
            "initiator": "Compact<u32>",
            "sender": "Compact<u32>",
            "recipient": "Compact<u32>"
          },
          "ClearOrigin": "Null",
          "DescendOrigin": "XcmV1MultilocationJunctions",
          "ReportError": {
            "queryId": "Compact<u64>",
            "dest": "XcmV1MultiLocation",
            "maxResponseWeight": "Compact<u64>"
          },
          "DepositAsset": {
            "assets": "XcmV1MultiassetMultiAssetFilter",
            "maxAssets": "Compact<u32>",
            "beneficiary": "XcmV1MultiLocation"
          },
          "DepositReserveAsset": {
            "assets": "XcmV1MultiassetMultiAssetFilter",
            "maxAssets": "Compact<u32>",
            "dest": "XcmV1MultiLocation",
            "xcm": "XcmV2Xcm"
          },
          "ExchangeAsset": {
            "give": "XcmV1MultiassetMultiAssetFilter",
            "receive": "XcmV1MultiassetMultiAssets"
          },
          "InitiateReserveWithdraw": {
            "assets": "XcmV1MultiassetMultiAssetFilter",
            "reserve": "XcmV1MultiLocation",
            "xcm": "XcmV2Xcm"
          },
          "InitiateTeleport": {
            "assets": "XcmV1MultiassetMultiAssetFilter",
            "dest": "XcmV1MultiLocation",
            "xcm": "XcmV2Xcm"
          },
          "QueryHolding": {
            "queryId": "Compact<u64>",
            "dest": "XcmV1MultiLocation",
            "assets": "XcmV1MultiassetMultiAssetFilter",
            "maxResponseWeight": "Compact<u64>"
          },
          "BuyExecution": {
            "fees": "XcmV1MultiAsset",
            "weightLimit": "XcmV2WeightLimit"
          },
          "RefundSurplus": "Null",
          "SetErrorHandler": "XcmV2Xcm",
          "SetAppendix": "XcmV2Xcm",
          "ClearError": "Null",
          "ClaimAsset": {
            "assets": "XcmV1MultiassetMultiAssets",
            "ticket": "XcmV1MultiLocation"
          },
          "Trap": "Compact<u64>",
          "SubscribeVersion": {
            "queryId": "Compact<u64>",
            "maxResponseWeight": "Compact<u64>"
          },
          "UnsubscribeVersion": "Null"
        }
      },
      "XcmV2Response": {
        "_enum": {
          "Null": "Null",
          "Assets": "XcmV1MultiassetMultiAssets",
          "ExecutionResult": "Option<(u32,XcmV2TraitsError)>",
          "Version": "u32"
        }
      },
      "XcmV2TraitsError": {
        "_enum": {
          "Overflow": "Null",
          "Unimplemented": "Null",
          "UntrustedReserveLocation": "Null",
          "UntrustedTeleportLocation": "Null",
          "MultiLocationFull": "Null",
          "MultiLocationNotInvertible": "Null",
          "BadOrigin": "Null",
          "InvalidLocation": "Null",
          "AssetNotFound": "Null",
          "FailedToTransactAsset": "Null",
          "NotWithdrawable": "Null",
          "LocationCannotHold": "Null",
          "ExceedsMaxMessageSize": "Null",
          "DestinationUnsupported": "Null",
          "Transport": "Null",
          "Unroutable": "Null",
          "UnknownClaim": "Null",
          "FailedToDecode": "Null",
          "MaxWeightInvalid": "Null",
          "NotHoldingFees": "Null",
          "TooExpensive": "Null",
          "Trap": "u64",
          "UnhandledXcmVersion": "Null",
          "WeightLimitReached": "u64",
          "Barrier": "Null",
          "WeightNotComputable": "Null"
        }
      },
      "XcmV2WeightLimit": {
        "_enum": {
          "Unlimited": "Null",
          "Limited": "Compact<u64>"
        }
      },
      "XcmVersionedMultiAssets": {
        "_enum": {
          "V0": "Vec<XcmV0MultiAsset>",
          "V1": "XcmV1MultiassetMultiAssets"
        }
      },
      "CumulusPalletXcmCall": "Null",
      "CumulusPalletDmpQueueCall": {
        "_enum": {
          "service_overweight": {
            "index": "u64",
            "weightLimit": "u64"
          }
        }
      },
      "PalletInflationCall": {
        "_enum": {
          "start_inflation": {
            "inflationStartRelayBlock": "u32"
          }
        }
      },
      "PalletUniqueCall": {
        "_enum": {
          "create_collection": {
            "collectionName": "Vec<u16>",
            "collectionDescription": "Vec<u16>",
            "tokenPrefix": "Bytes",
            "mode": "UpDataStructsCollectionMode"
          },
          "create_collection_ex": {
            "data": "UpDataStructsCreateCollectionData"
          },
          "destroy_collection": {
            "collectionId": "u32"
          },
          "add_to_allow_list": {
            "collectionId": "u32",
            "address": "PalletEvmAccountBasicCrossAccountIdRepr"
          },
          "remove_from_allow_list": {
            "collectionId": "u32",
            "address": "PalletEvmAccountBasicCrossAccountIdRepr"
          },
          "change_collection_owner": {
            "collectionId": "u32",
            "newOwner": "AccountId32"
          },
          "add_collection_admin": {
            "collectionId": "u32",
            "newAdminId": "PalletEvmAccountBasicCrossAccountIdRepr"
          },
          "remove_collection_admin": {
            "collectionId": "u32",
            "accountId": "PalletEvmAccountBasicCrossAccountIdRepr"
          },
          "set_collection_sponsor": {
            "collectionId": "u32",
            "newSponsor": "AccountId32"
          },
          "confirm_sponsorship": {
            "collectionId": "u32"
          },
          "remove_collection_sponsor": {
            "collectionId": "u32"
          },
          "create_item": {
            "collectionId": "u32",
            "owner": "PalletEvmAccountBasicCrossAccountIdRepr",
            "data": "UpDataStructsCreateItemData"
          },
          "create_multiple_items": {
            "collectionId": "u32",
            "owner": "PalletEvmAccountBasicCrossAccountIdRepr",
            "itemsData": "Vec<UpDataStructsCreateItemData>"
          },
          "set_collection_properties": {
            "collectionId": "u32",
            "properties": "Vec<UpDataStructsProperty>"
          },
          "delete_collection_properties": {
            "collectionId": "u32",
            "propertyKeys": "Vec<Bytes>"
          },
          "set_token_properties": {
            "collectionId": "u32",
            "tokenId": "u32",
            "properties": "Vec<UpDataStructsProperty>"
          },
          "delete_token_properties": {
            "collectionId": "u32",
            "tokenId": "u32",
            "propertyKeys": "Vec<Bytes>"
          },
          "set_token_property_permissions": {
            "collectionId": "u32",
            "propertyPermissions": "Vec<UpDataStructsPropertyKeyPermission>"
          },
          "create_multiple_items_ex": {
            "collectionId": "u32",
            "data": "UpDataStructsCreateItemExData"
          },
          "set_transfers_enabled_flag": {
            "collectionId": "u32",
            "value": "bool"
          },
          "burn_item": {
            "collectionId": "u32",
            "itemId": "u32",
            "value": "u128"
          },
          "burn_from": {
            "collectionId": "u32",
            "from": "PalletEvmAccountBasicCrossAccountIdRepr",
            "itemId": "u32",
            "value": "u128"
          },
          "transfer": {
            "recipient": "PalletEvmAccountBasicCrossAccountIdRepr",
            "collectionId": "u32",
            "itemId": "u32",
            "value": "u128"
          },
          "approve": {
            "spender": "PalletEvmAccountBasicCrossAccountIdRepr",
            "collectionId": "u32",
            "itemId": "u32",
            "amount": "u128"
          },
          "transfer_from": {
            "from": "PalletEvmAccountBasicCrossAccountIdRepr",
            "recipient": "PalletEvmAccountBasicCrossAccountIdRepr",
            "collectionId": "u32",
            "itemId": "u32",
            "value": "u128"
          },
          "set_collection_limits": {
            "collectionId": "u32",
            "newLimit": "UpDataStructsCollectionLimits"
          },
          "set_collection_permissions": {
            "collectionId": "u32",
            "newLimit": "UpDataStructsCollectionPermissions"
          },
          "repartition": {
            "collectionId": "u32",
            "token": "u32",
            "amount": "u128"
          }
        }
      },
      "UpDataStructsCollectionMode": {
        "_enum": {
          "NFT": "Null",
          "Fungible": "u8",
          "ReFungible": "Null"
        }
      },
      "UpDataStructsCreateCollectionData": {
        "mode": "UpDataStructsCollectionMode",
        "access": "Option<UpDataStructsAccessMode>",
        "name": "Vec<u16>",
        "description": "Vec<u16>",
        "tokenPrefix": "Bytes",
        "pendingSponsor": "Option<AccountId32>",
        "limits": "Option<UpDataStructsCollectionLimits>",
        "permissions": "Option<UpDataStructsCollectionPermissions>",
        "tokenPropertyPermissions": "Vec<UpDataStructsPropertyKeyPermission>",
        "properties": "Vec<UpDataStructsProperty>"
      },
      "UpDataStructsAccessMode": {
        "_enum": [
          "Normal",
          "AllowList"
        ]
      },
      "UpDataStructsCollectionLimits": {
        "accountTokenOwnershipLimit": "Option<u32>",
        "sponsoredDataSize": "Option<u32>",
        "sponsoredDataRateLimit": "Option<UpDataStructsSponsoringRateLimit>",
        "tokenLimit": "Option<u32>",
        "sponsorTransferTimeout": "Option<u32>",
        "sponsorApproveTimeout": "Option<u32>",
        "ownerCanTransfer": "Option<bool>",
        "ownerCanDestroy": "Option<bool>",
        "transfersEnabled": "Option<bool>"
      },
      "UpDataStructsSponsoringRateLimit": {
        "_enum": {
          "SponsoringDisabled": "Null",
          "Blocks": "u32"
        }
      },
      "UpDataStructsCollectionPermissions": {
        "access": "Option<UpDataStructsAccessMode>",
        "mintMode": "Option<bool>",
        "nesting": "Option<UpDataStructsNestingPermissions>"
      },
      "UpDataStructsNestingPermissions": {
        "tokenOwner": "bool",
        "collectionAdmin": "bool",
        "restricted": "Option<UpDataStructsOwnerRestrictedSet>"
      },
      "UpDataStructsOwnerRestrictedSet": "BTreeSet<u32>",
      "UpDataStructsPropertyKeyPermission": {
        "key": "Bytes",
        "permission": "UpDataStructsPropertyPermission"
      },
      "UpDataStructsPropertyPermission": {
        "mutable": "bool",
        "collectionAdmin": "bool",
        "tokenOwner": "bool"
      },
      "UpDataStructsProperty": {
        "key": "Bytes",
        "value": "Bytes"
      },
      "PalletEvmAccountBasicCrossAccountIdRepr": {
        "_enum": {
          "Substrate": "AccountId32",
          "Ethereum": "H160"
        }
      },
      "UpDataStructsCreateItemData": {
        "_enum": {
          "NFT": "UpDataStructsCreateNftData",
          "Fungible": "UpDataStructsCreateFungibleData",
          "ReFungible": "UpDataStructsCreateReFungibleData"
        }
      },
      "UpDataStructsCreateNftData": {
        "properties": "Vec<UpDataStructsProperty>"
      },
      "UpDataStructsCreateFungibleData": {
        "value": "u128"
      },
      "UpDataStructsCreateReFungibleData": {
        "constData": "Bytes",
        "pieces": "u128"
      },
      "UpDataStructsCreateItemExData": {
        "_enum": {
          "NFT": "Vec<UpDataStructsCreateNftExData>",
          "Fungible": "BTreeMap<PalletEvmAccountBasicCrossAccountIdRepr, u128>",
          "RefungibleMultipleItems": "Vec<UpDataStructsCreateRefungibleExData>",
          "RefungibleMultipleOwners": "UpDataStructsCreateRefungibleExData"
        }
      },
      "UpDataStructsCreateNftExData": {
        "properties": "Vec<UpDataStructsProperty>",
        "owner": "PalletEvmAccountBasicCrossAccountIdRepr"
      },
      "UpDataStructsCreateRefungibleExData": {
        "constData": "Bytes",
        "users": "BTreeMap<PalletEvmAccountBasicCrossAccountIdRepr, u128>"
      },
      "PalletUniqueSchedulerCall": {
        "_enum": {
          "schedule_named": {
            "id": "[u8;16]",
            "when": "u32",
            "maybePeriodic": "Option<(u32,u32)>",
            "priority": "u8",
            "call": "FrameSupportScheduleMaybeHashed"
          },
          "cancel_named": {
            "id": "[u8;16]"
          },
          "schedule_named_after": {
            "id": "[u8;16]",
            "after": "u32",
            "maybePeriodic": "Option<(u32,u32)>",
            "priority": "u8",
            "call": "FrameSupportScheduleMaybeHashed"
          }
        }
      },
      "FrameSupportScheduleMaybeHashed": {
        "_enum": {
          "Value": "Call",
          "Hash": "H256"
        }
      },
      "PalletTemplateTransactionPaymentCall": "Null",
      "PalletStructureCall": "Null",
      "PalletRmrkCoreCall": {
        "_enum": {
          "create_collection": {
            "metadata": "Bytes",
            "max": "Option<u32>",
            "symbol": "Bytes"
          },
          "destroy_collection": {
            "collectionId": "u32"
          },
          "change_collection_issuer": {
            "collectionId": "u32",
            "newIssuer": "MultiAddress"
          },
          "lock_collection": {
            "collectionId": "u32"
          },
          "mint_nft": {
            "owner": "Option<AccountId32>",
            "collectionId": "u32",
            "recipient": "Option<AccountId32>",
            "royaltyAmount": "Option<Permill>",
            "metadata": "Bytes",
            "transferable": "bool",
            "resources": "Option<Vec<RmrkTraitsResourceResourceTypes>>"
          },
          "burn_nft": {
            "collectionId": "u32",
            "nftId": "u32",
            "maxBurns": "u32"
          },
          "send": {
            "rmrkCollectionId": "u32",
            "rmrkNftId": "u32",
            "newOwner": "RmrkTraitsNftAccountIdOrCollectionNftTuple"
          },
          "accept_nft": {
            "rmrkCollectionId": "u32",
            "rmrkNftId": "u32",
            "newOwner": "RmrkTraitsNftAccountIdOrCollectionNftTuple"
          },
          "reject_nft": {
            "rmrkCollectionId": "u32",
            "rmrkNftId": "u32"
          },
          "accept_resource": {
            "rmrkCollectionId": "u32",
            "rmrkNftId": "u32",
            "resourceId": "u32"
          },
          "accept_resource_removal": {
            "rmrkCollectionId": "u32",
            "rmrkNftId": "u32",
            "resourceId": "u32"
          },
          "set_property": {
            "rmrkCollectionId": "Compact<u32>",
            "maybeNftId": "Option<u32>",
            "key": "Bytes",
            "value": "Bytes"
          },
          "set_priority": {
            "rmrkCollectionId": "u32",
            "rmrkNftId": "u32",
            "priorities": "Vec<u32>"
          },
          "add_basic_resource": {
            "rmrkCollectionId": "u32",
            "nftId": "u32",
            "resource": "RmrkTraitsResourceBasicResource"
          },
          "add_composable_resource": {
            "rmrkCollectionId": "u32",
            "nftId": "u32",
            "resource": "RmrkTraitsResourceComposableResource"
          },
          "add_slot_resource": {
            "rmrkCollectionId": "u32",
            "nftId": "u32",
            "resource": "RmrkTraitsResourceSlotResource"
          },
          "remove_resource": {
            "rmrkCollectionId": "u32",
            "nftId": "u32",
            "resourceId": "u32"
          }
        }
      },
      "RmrkTraitsResourceResourceTypes": {
        "_enum": {
          "Basic": "RmrkTraitsResourceBasicResource",
          "Composable": "RmrkTraitsResourceComposableResource",
          "Slot": "RmrkTraitsResourceSlotResource"
        }
      },
      "RmrkTraitsResourceBasicResource": {
        "src": "Option<Bytes>",
        "metadata": "Option<Bytes>",
        "license": "Option<Bytes>",
        "thumb": "Option<Bytes>"
      },
      "RmrkTraitsResourceComposableResource": {
        "parts": "Vec<u32>",
        "base": "u32",
        "src": "Option<Bytes>",
        "metadata": "Option<Bytes>",
        "license": "Option<Bytes>",
        "thumb": "Option<Bytes>"
      },
      "RmrkTraitsResourceSlotResource": {
        "base": "u32",
        "src": "Option<Bytes>",
        "metadata": "Option<Bytes>",
        "slot": "u32",
        "license": "Option<Bytes>",
        "thumb": "Option<Bytes>"
      },
      "RmrkTraitsNftAccountIdOrCollectionNftTuple": {
        "_enum": {
          "AccountId": "AccountId32",
          "CollectionAndNftTuple": "(u32,u32)"
        }
      },
      "PalletRmrkEquipCall": {
        "_enum": {
          "create_base": {
            "baseType": "Bytes",
            "symbol": "Bytes",
            "parts": "Vec<RmrkTraitsPartPartType>"
          },
          "theme_add": {
            "baseId": "u32",
            "theme": "RmrkTraitsTheme"
          },
          "equippable": {
            "baseId": "u32",
            "slotId": "u32",
            "equippables": "RmrkTraitsPartEquippableList"
          }
        }
      },
      "RmrkTraitsPartPartType": {
        "_enum": {
          "FixedPart": "RmrkTraitsPartFixedPart",
          "SlotPart": "RmrkTraitsPartSlotPart"
        }
      },
      "RmrkTraitsPartFixedPart": {
        "id": "u32",
        "z": "u32",
        "src": "Bytes"
      },
      "RmrkTraitsPartSlotPart": {
        "id": "u32",
        "equippable": "RmrkTraitsPartEquippableList",
        "src": "Bytes",
        "z": "u32"
      },
      "RmrkTraitsPartEquippableList": {
        "_enum": {
          "All": "Null",
          "Empty": "Null",
          "Custom": "Vec<u32>"
        }
      },
      "RmrkTraitsTheme": {
        "name": "Bytes",
        "properties": "Vec<RmrkTraitsThemeThemeProperty>",
        "inherit": "bool"
      },
      "RmrkTraitsThemeThemeProperty": {
        "key": "Bytes",
        "value": "Bytes"
      },
      "PalletEvmCall": {
        "_enum": {
          "withdraw": {
            "address": "H160",
            "value": "u128"
          },
          "call": {
            "source": "H160",
            "target": "H160",
            "input": "Bytes",
            "value": "U256",
            "gasLimit": "u64",
            "maxFeePerGas": "U256",
            "maxPriorityFeePerGas": "Option<U256>",
            "nonce": "Option<U256>",
            "accessList": "Vec<(H160,Vec<H256>)>"
          },
          "create": {
            "source": "H160",
            "init": "Bytes",
            "value": "U256",
            "gasLimit": "u64",
            "maxFeePerGas": "U256",
            "maxPriorityFeePerGas": "Option<U256>",
            "nonce": "Option<U256>",
            "accessList": "Vec<(H160,Vec<H256>)>"
          },
          "create2": {
            "source": "H160",
            "init": "Bytes",
            "salt": "H256",
            "value": "U256",
            "gasLimit": "u64",
            "maxFeePerGas": "U256",
            "maxPriorityFeePerGas": "Option<U256>",
            "nonce": "Option<U256>",
            "accessList": "Vec<(H160,Vec<H256>)>"
          }
        }
      },
      "PalletEthereumCall": {
        "_enum": {
          "transact": {
            "transaction": "EthereumTransactionTransactionV2"
          }
        }
      },
      "EthereumTransactionTransactionV2": {
        "_enum": {
          "Legacy": "EthereumTransactionLegacyTransaction",
          "EIP2930": "EthereumTransactionEip2930Transaction",
          "EIP1559": "EthereumTransactionEip1559Transaction"
        }
      },
      "EthereumTransactionLegacyTransaction": {
        "nonce": "U256",
        "gasPrice": "U256",
        "gasLimit": "U256",
        "action": "EthereumTransactionTransactionAction",
        "value": "U256",
        "input": "Bytes",
        "signature": "EthereumTransactionTransactionSignature"
      },
      "EthereumTransactionTransactionAction": {
        "_enum": {
          "Call": "H160",
          "Create": "Null"
        }
      },
      "EthereumTransactionTransactionSignature": {
        "v": "u64",
        "r": "H256",
        "s": "H256"
      },
      "EthereumTransactionEip2930Transaction": {
        "chainId": "u64",
        "nonce": "U256",
        "gasPrice": "U256",
        "gasLimit": "U256",
        "action": "EthereumTransactionTransactionAction",
        "value": "U256",
        "input": "Bytes",
        "accessList": "Vec<EthereumTransactionAccessListItem>",
        "oddYParity": "bool",
        "r": "H256",
        "s": "H256"
      },
      "EthereumTransactionAccessListItem": {
        "address": "H160",
        "storageKeys": "Vec<H256>"
      },
      "EthereumTransactionEip1559Transaction": {
        "chainId": "u64",
        "nonce": "U256",
        "maxPriorityFeePerGas": "U256",
        "maxFeePerGas": "U256",
        "gasLimit": "U256",
        "action": "EthereumTransactionTransactionAction",
        "value": "U256",
        "input": "Bytes",
        "accessList": "Vec<EthereumTransactionAccessListItem>",
        "oddYParity": "bool",
        "r": "H256",
        "s": "H256"
      },
      "PalletEvmMigrationCall": {
        "_enum": {
          "begin": {
            "address": "H160"
          },
          "set_data": {
            "address": "H160",
            "data": "Vec<(H256,H256)>"
          },
          "finish": {
            "address": "H160",
            "code": "Bytes"
          }
        }
      },
      "PalletSudoEvent": {
        "_enum": {
          "Sudid": {
            "sudoResult": "Result<Null, SpRuntimeDispatchError>"
          },
          "KeyChanged": {
            "oldSudoer": "Option<AccountId32>"
          },
          "SudoAsDone": {
            "sudoResult": "Result<Null, SpRuntimeDispatchError>"
          }
        }
      },
      "SpRuntimeDispatchError": {
        "_enum": {
          "Other": "Null",
          "CannotLookup": "Null",
          "BadOrigin": "Null",
          "Module": "SpRuntimeModuleError",
          "ConsumerRemaining": "Null",
          "NoProviders": "Null",
          "TooManyConsumers": "Null",
          "Token": "SpRuntimeTokenError",
          "Arithmetic": "SpRuntimeArithmeticError",
          "Transactional": "SpRuntimeTransactionalError"
        }
      },
      "SpRuntimeModuleError": {
        "index": "u8",
        "error": "[u8;4]"
      },
      "SpRuntimeTokenError": {
        "_enum": [
          "NoFunds",
          "WouldDie",
          "BelowMinimum",
          "CannotCreate",
          "UnknownAsset",
          "Frozen",
          "Unsupported"
        ]
      },
      "SpRuntimeArithmeticError": {
        "_enum": [
          "Underflow",
          "Overflow",
          "DivisionByZero"
        ]
      },
      "SpRuntimeTransactionalError": {
        "_enum": [
          "LimitReached",
          "NoLayer"
        ]
      },
      "PalletSudoError": {
        "_enum": [
          "RequireSudo"
        ]
      },
      "FrameSystemAccountInfo": {
        "nonce": "u32",
        "consumers": "u32",
        "providers": "u32",
        "sufficients": "u32",
        "data": "PalletBalancesAccountData"
      },
      "FrameSupportWeightsPerDispatchClassU64": {
        "normal": "u64",
        "operational": "u64",
        "mandatory": "u64"
      },
      "SpRuntimeDigest": {
        "logs": "Vec<SpRuntimeDigestDigestItem>"
      },
      "SpRuntimeDigestDigestItem": {
        "_enum": {
          "Other": "Bytes",
          "__Unused1": "Null",
          "__Unused2": "Null",
          "__Unused3": "Null",
          "Consensus": "([u8;4],Bytes)",
          "Seal": "([u8;4],Bytes)",
          "PreRuntime": "([u8;4],Bytes)",
          "__Unused7": "Null",
          "RuntimeEnvironmentUpdated": "Null"
        }
      },
      "FrameSystemEventRecord": {
        "phase": "FrameSystemPhase",
        "event": "Event",
        "topics": "Vec<H256>"
      },
      "FrameSystemEvent": {
        "_enum": {
          "ExtrinsicSuccess": {
            "dispatchInfo": "FrameSupportWeightsDispatchInfo"
          },
          "ExtrinsicFailed": {
            "dispatchError": "SpRuntimeDispatchError",
            "dispatchInfo": "FrameSupportWeightsDispatchInfo"
          },
          "CodeUpdated": "Null",
          "NewAccount": {
            "account": "AccountId32"
          },
          "KilledAccount": {
            "account": "AccountId32"
          },
          "Remarked": {
            "_alias": {
              "hash_": "hash"
            },
            "sender": "AccountId32",
            "hash_": "H256"
          }
        }
      },
      "FrameSupportWeightsDispatchInfo": {
        "weight": "u64",
        "class": "FrameSupportWeightsDispatchClass",
        "paysFee": "FrameSupportWeightsPays"
      },
      "FrameSupportWeightsDispatchClass": {
        "_enum": [
          "Normal",
          "Operational",
          "Mandatory"
        ]
      },
      "FrameSupportWeightsPays": {
        "_enum": [
          "Yes",
          "No"
        ]
      },
      "OrmlVestingModuleEvent": {
        "_enum": {
          "VestingScheduleAdded": {
            "from": "AccountId32",
            "to": "AccountId32",
            "vestingSchedule": "OrmlVestingVestingSchedule"
          },
          "Claimed": {
            "who": "AccountId32",
            "amount": "u128"
          },
          "VestingSchedulesUpdated": {
            "who": "AccountId32"
          }
        }
      },
      "CumulusPalletXcmpQueueEvent": {
        "_enum": {
          "Success": "Option<H256>",
          "Fail": "(Option<H256>,XcmV2TraitsError)",
          "BadVersion": "Option<H256>",
          "BadFormat": "Option<H256>",
          "UpwardMessageSent": "Option<H256>",
          "XcmpMessageSent": "Option<H256>",
          "OverweightEnqueued": "(u32,u32,u64,u64)",
          "OverweightServiced": "(u64,u64)"
        }
      },
      "PalletXcmEvent": {
        "_enum": {
          "Attempted": "XcmV2TraitsOutcome",
          "Sent": "(XcmV1MultiLocation,XcmV1MultiLocation,XcmV2Xcm)",
          "UnexpectedResponse": "(XcmV1MultiLocation,u64)",
          "ResponseReady": "(u64,XcmV2Response)",
          "Notified": "(u64,u8,u8)",
          "NotifyOverweight": "(u64,u8,u8,u64,u64)",
          "NotifyDispatchError": "(u64,u8,u8)",
          "NotifyDecodeFailed": "(u64,u8,u8)",
          "InvalidResponder": "(XcmV1MultiLocation,u64,Option<XcmV1MultiLocation>)",
          "InvalidResponderVersion": "(XcmV1MultiLocation,u64)",
          "ResponseTaken": "u64",
          "AssetsTrapped": "(H256,XcmV1MultiLocation,XcmVersionedMultiAssets)",
          "VersionChangeNotified": "(XcmV1MultiLocation,u32)",
          "SupportedVersionChanged": "(XcmV1MultiLocation,u32)",
          "NotifyTargetSendFail": "(XcmV1MultiLocation,u64,XcmV2TraitsError)",
          "NotifyTargetMigrationFail": "(XcmVersionedMultiLocation,u64)"
        }
      },
      "XcmV2TraitsOutcome": {
        "_enum": {
          "Complete": "u64",
          "Incomplete": "(u64,XcmV2TraitsError)",
          "Error": "XcmV2TraitsError"
        }
      },
      "CumulusPalletXcmEvent": {
        "_enum": {
          "InvalidFormat": "[u8;8]",
          "UnsupportedVersion": "[u8;8]",
          "ExecutedDownward": "([u8;8],XcmV2TraitsOutcome)"
        }
      },
      "CumulusPalletDmpQueueEvent": {
        "_enum": {
          "InvalidFormat": {
            "messageId": "[u8;32]"
          },
          "UnsupportedVersion": {
            "messageId": "[u8;32]"
          },
          "ExecutedDownward": {
            "messageId": "[u8;32]",
            "outcome": "XcmV2TraitsOutcome"
          },
          "WeightExhausted": {
            "messageId": "[u8;32]",
            "remainingWeight": "u64",
            "requiredWeight": "u64"
          },
          "OverweightEnqueued": {
            "messageId": "[u8;32]",
            "overweightIndex": "u64",
            "requiredWeight": "u64"
          },
          "OverweightServiced": {
            "overweightIndex": "u64",
            "weightUsed": "u64"
          }
        }
      },
      "PalletUniqueRawEvent": {
        "_enum": {
          "CollectionSponsorRemoved": "u32",
          "CollectionAdminAdded": "(u32,PalletEvmAccountBasicCrossAccountIdRepr)",
          "CollectionOwnedChanged": "(u32,AccountId32)",
          "CollectionSponsorSet": "(u32,AccountId32)",
          "SponsorshipConfirmed": "(u32,AccountId32)",
          "CollectionAdminRemoved": "(u32,PalletEvmAccountBasicCrossAccountIdRepr)",
          "AllowListAddressRemoved": "(u32,PalletEvmAccountBasicCrossAccountIdRepr)",
          "AllowListAddressAdded": "(u32,PalletEvmAccountBasicCrossAccountIdRepr)",
          "CollectionLimitSet": "u32",
          "CollectionPermissionSet": "u32"
        }
      },
      "PalletUniqueSchedulerEvent": {
        "_enum": {
          "Scheduled": {
            "when": "u32",
            "index": "u32"
          },
          "Canceled": {
            "when": "u32",
            "index": "u32"
          },
          "Dispatched": {
            "task": "(u32,u32)",
            "id": "Option<[u8;16]>",
            "result": "Result<Null, SpRuntimeDispatchError>"
          },
          "CallLookupFailed": {
            "task": "(u32,u32)",
            "id": "Option<[u8;16]>",
            "error": "FrameSupportScheduleLookupError"
          }
        }
      },
      "FrameSupportScheduleLookupError": {
        "_enum": [
          "Unknown",
          "BadFormat"
        ]
      },
      "PalletCommonEvent": {
        "_enum": {
          "CollectionCreated": "(u32,u8,AccountId32)",
          "CollectionDestroyed": "u32",
          "ItemCreated": "(u32,u32,PalletEvmAccountBasicCrossAccountIdRepr,u128)",
          "ItemDestroyed": "(u32,u32,PalletEvmAccountBasicCrossAccountIdRepr,u128)",
          "Transfer": "(u32,u32,PalletEvmAccountBasicCrossAccountIdRepr,PalletEvmAccountBasicCrossAccountIdRepr,u128)",
          "Approved": "(u32,u32,PalletEvmAccountBasicCrossAccountIdRepr,PalletEvmAccountBasicCrossAccountIdRepr,u128)",
          "CollectionPropertySet": "(u32,Bytes)",
          "CollectionPropertyDeleted": "(u32,Bytes)",
          "TokenPropertySet": "(u32,u32,Bytes)",
          "TokenPropertyDeleted": "(u32,u32,Bytes)",
          "PropertyPermissionSet": "(u32,Bytes)"
        }
      },
      "PalletStructureEvent": {
        "_enum": {
          "Executed": "Result<Null, SpRuntimeDispatchError>"
        }
      },
      "PalletRmrkCoreEvent": {
        "_enum": {
          "CollectionCreated": {
            "issuer": "AccountId32",
            "collectionId": "u32"
          },
          "CollectionDestroyed": {
            "issuer": "AccountId32",
            "collectionId": "u32"
          },
          "IssuerChanged": {
            "oldIssuer": "AccountId32",
            "newIssuer": "AccountId32",
            "collectionId": "u32"
          },
          "CollectionLocked": {
            "issuer": "AccountId32",
            "collectionId": "u32"
          },
          "NftMinted": {
            "owner": "AccountId32",
            "collectionId": "u32",
            "nftId": "u32"
          },
          "NFTBurned": {
            "owner": "AccountId32",
            "nftId": "u32"
          },
          "NFTSent": {
            "sender": "AccountId32",
            "recipient": "RmrkTraitsNftAccountIdOrCollectionNftTuple",
            "collectionId": "u32",
            "nftId": "u32",
            "approvalRequired": "bool"
          },
          "NFTAccepted": {
            "sender": "AccountId32",
            "recipient": "RmrkTraitsNftAccountIdOrCollectionNftTuple",
            "collectionId": "u32",
            "nftId": "u32"
          },
          "NFTRejected": {
            "sender": "AccountId32",
            "collectionId": "u32",
            "nftId": "u32"
          },
          "PropertySet": {
            "collectionId": "u32",
            "maybeNftId": "Option<u32>",
            "key": "Bytes",
            "value": "Bytes"
          },
          "ResourceAdded": {
            "nftId": "u32",
            "resourceId": "u32"
          },
          "ResourceRemoval": {
            "nftId": "u32",
            "resourceId": "u32"
          },
          "ResourceAccepted": {
            "nftId": "u32",
            "resourceId": "u32"
          },
          "ResourceRemovalAccepted": {
            "nftId": "u32",
            "resourceId": "u32"
          },
          "PrioritySet": {
            "collectionId": "u32",
            "nftId": "u32"
          }
        }
      },
      "PalletRmrkEquipEvent": {
        "_enum": {
          "BaseCreated": {
            "issuer": "AccountId32",
            "baseId": "u32"
          },
          "EquippablesUpdated": {
            "baseId": "u32",
            "slotId": "u32"
          }
        }
      },
      "PalletEvmEvent": {
        "_enum": {
          "Log": "EthereumLog",
          "Created": "H160",
          "CreatedFailed": "H160",
          "Executed": "H160",
          "ExecutedFailed": "H160",
          "BalanceDeposit": "(AccountId32,H160,U256)",
          "BalanceWithdraw": "(AccountId32,H160,U256)"
        }
      },
      "EthereumLog": {
        "address": "H160",
        "topics": "Vec<H256>",
        "data": "Bytes"
      },
      "PalletEthereumEvent": {
        "_enum": {
          "Executed": "(H160,H160,H256,EvmCoreErrorExitReason)"
        }
      },
      "EvmCoreErrorExitReason": {
        "_enum": {
          "Succeed": "EvmCoreErrorExitSucceed",
          "Error": "EvmCoreErrorExitError",
          "Revert": "EvmCoreErrorExitRevert",
          "Fatal": "EvmCoreErrorExitFatal"
        }
      },
      "EvmCoreErrorExitSucceed": {
        "_enum": [
          "Stopped",
          "Returned",
          "Suicided"
        ]
      },
      "EvmCoreErrorExitError": {
        "_enum": {
          "StackUnderflow": "Null",
          "StackOverflow": "Null",
          "InvalidJump": "Null",
          "InvalidRange": "Null",
          "DesignatedInvalid": "Null",
          "CallTooDeep": "Null",
          "CreateCollision": "Null",
          "CreateContractLimit": "Null",
          "OutOfOffset": "Null",
          "OutOfGas": "Null",
          "OutOfFund": "Null",
          "PCUnderflow": "Null",
          "CreateEmpty": "Null",
          "Other": "Text",
          "InvalidCode": "Null"
        }
      },
      "EvmCoreErrorExitRevert": {
        "_enum": [
          "Reverted"
        ]
      },
      "EvmCoreErrorExitFatal": {
        "_enum": {
          "NotSupported": "Null",
          "UnhandledInterrupt": "Null",
          "CallErrorAsFatal": "EvmCoreErrorExitError",
          "Other": "Text"
        }
      },
      "FrameSystemPhase": {
        "_enum": {
          "ApplyExtrinsic": "u32",
          "Finalization": "Null",
          "Initialization": "Null"
        }
      },
      "FrameSystemLastRuntimeUpgradeInfo": {
        "specVersion": "Compact<u32>",
        "specName": "Text"
      },
      "FrameSystemLimitsBlockWeights": {
        "baseBlock": "u64",
        "maxBlock": "u64",
        "perClass": "FrameSupportWeightsPerDispatchClassWeightsPerClass"
      },
      "FrameSupportWeightsPerDispatchClassWeightsPerClass": {
        "normal": "FrameSystemLimitsWeightsPerClass",
        "operational": "FrameSystemLimitsWeightsPerClass",
        "mandatory": "FrameSystemLimitsWeightsPerClass"
      },
      "FrameSystemLimitsWeightsPerClass": {
        "baseExtrinsic": "u64",
        "maxExtrinsic": "Option<u64>",
        "maxTotal": "Option<u64>",
        "reserved": "Option<u64>"
      },
      "FrameSystemLimitsBlockLength": {
        "max": "FrameSupportWeightsPerDispatchClassU32"
      },
      "FrameSupportWeightsPerDispatchClassU32": {
        "normal": "u32",
        "operational": "u32",
        "mandatory": "u32"
      },
      "FrameSupportWeightsRuntimeDbWeight": {
        "read": "u64",
        "write": "u64"
      },
      "SpVersionRuntimeVersion": {
        "specName": "Text",
        "implName": "Text",
        "authoringVersion": "u32",
        "specVersion": "u32",
        "implVersion": "u32",
        "apis": "Vec<([u8;8],u32)>",
        "transactionVersion": "u32",
        "stateVersion": "u8"
      },
      "FrameSystemError": {
        "_enum": [
          "InvalidSpecName",
          "SpecVersionNeedsToIncrease",
          "FailedToExtractRuntimeVersion",
          "NonDefaultComposite",
          "NonZeroRefCount",
          "CallFiltered"
        ]
      },
      "OrmlVestingModuleError": {
        "_enum": [
          "ZeroVestingPeriod",
          "ZeroVestingPeriodCount",
          "InsufficientBalanceToLock",
          "TooManyVestingSchedules",
          "AmountLow",
          "MaxVestingSchedulesExceeded"
        ]
      },
      "CumulusPalletXcmpQueueInboundChannelDetails": {
        "sender": "u32",
        "state": "CumulusPalletXcmpQueueInboundState",
        "messageMetadata": "Vec<(u32,PolkadotParachainPrimitivesXcmpMessageFormat)>"
      },
      "CumulusPalletXcmpQueueInboundState": {
        "_enum": [
          "Ok",
          "Suspended"
        ]
      },
      "PolkadotParachainPrimitivesXcmpMessageFormat": {
        "_enum": [
          "ConcatenatedVersionedXcm",
          "ConcatenatedEncodedBlob",
          "Signals"
        ]
      },
      "CumulusPalletXcmpQueueOutboundChannelDetails": {
        "recipient": "u32",
        "state": "CumulusPalletXcmpQueueOutboundState",
        "signalsExist": "bool",
        "firstIndex": "u16",
        "lastIndex": "u16"
      },
      "CumulusPalletXcmpQueueOutboundState": {
        "_enum": [
          "Ok",
          "Suspended"
        ]
      },
      "CumulusPalletXcmpQueueQueueConfigData": {
        "suspendThreshold": "u32",
        "dropThreshold": "u32",
        "resumeThreshold": "u32",
        "thresholdWeight": "u64",
        "weightRestrictDecay": "u64",
        "xcmpMaxIndividualWeight": "u64"
      },
      "CumulusPalletXcmpQueueError": {
        "_enum": [
          "FailedToSend",
          "BadXcmOrigin",
          "BadXcm",
          "BadOverweightIndex",
          "WeightOverLimit"
        ]
      },
      "PalletXcmError": {
        "_enum": [
          "Unreachable",
          "SendFailure",
          "Filtered",
          "UnweighableMessage",
          "DestinationNotInvertible",
          "Empty",
          "CannotReanchor",
          "TooManyAssets",
          "InvalidOrigin",
          "BadVersion",
          "BadLocation",
          "NoSubscription",
          "AlreadySubscribed"
        ]
      },
      "CumulusPalletXcmError": "Null",
      "CumulusPalletDmpQueueConfigData": {
        "maxIndividual": "u64"
      },
      "CumulusPalletDmpQueuePageIndexData": {
        "beginUsed": "u32",
        "endUsed": "u32",
        "overweightCount": "u64"
      },
      "CumulusPalletDmpQueueError": {
        "_enum": [
          "Unknown",
          "OverLimit"
        ]
      },
      "PalletUniqueError": {
        "_enum": [
          "CollectionDecimalPointLimitExceeded",
          "ConfirmUnsetSponsorFail",
          "EmptyArgument",
          "RepartitionCalledOnNonRefungibleCollection"
        ]
      },
      "PalletUniqueSchedulerScheduledV3": {
        "maybeId": "Option<[u8;16]>",
        "priority": "u8",
        "call": "FrameSupportScheduleMaybeHashed",
        "maybePeriodic": "Option<(u32,u32)>",
        "origin": "QuartzRuntimeOriginCaller"
      },
      "QuartzRuntimeOriginCaller": {
        "_enum": {
          "__Unused0": "Null",
          "__Unused1": "Null",
          "__Unused2": "Null",
          "__Unused3": "Null",
          "Void": "SpCoreVoid",
          "__Unused5": "Null",
          "__Unused6": "Null",
          "__Unused7": "Null",
          "__Unused8": "Null",
          "__Unused9": "Null",
          "__Unused10": "Null",
          "__Unused11": "Null",
          "__Unused12": "Null",
          "__Unused13": "Null",
          "__Unused14": "Null",
          "__Unused15": "Null",
          "__Unused16": "Null",
          "__Unused17": "Null",
          "__Unused18": "Null",
          "__Unused19": "Null",
          "__Unused20": "Null",
          "__Unused21": "Null",
          "__Unused22": "Null",
          "__Unused23": "Null",
          "__Unused24": "Null",
          "__Unused25": "Null",
          "__Unused26": "Null",
          "__Unused27": "Null",
          "__Unused28": "Null",
          "__Unused29": "Null",
          "__Unused30": "Null",
          "__Unused31": "Null",
          "__Unused32": "Null",
          "__Unused33": "Null",
          "__Unused34": "Null",
          "__Unused35": "Null",
          "system": "FrameSupportDispatchRawOrigin",
          "__Unused37": "Null",
          "__Unused38": "Null",
          "__Unused39": "Null",
          "__Unused40": "Null",
          "__Unused41": "Null",
          "__Unused42": "Null",
          "__Unused43": "Null",
          "__Unused44": "Null",
          "__Unused45": "Null",
          "__Unused46": "Null",
          "__Unused47": "Null",
          "__Unused48": "Null",
          "__Unused49": "Null",
          "__Unused50": "Null",
          "PolkadotXcm": "PalletXcmOrigin",
          "CumulusXcm": "CumulusPalletXcmOrigin",
          "__Unused53": "Null",
          "__Unused54": "Null",
          "__Unused55": "Null",
          "__Unused56": "Null",
          "__Unused57": "Null",
          "__Unused58": "Null",
          "__Unused59": "Null",
          "__Unused60": "Null",
          "__Unused61": "Null",
          "__Unused62": "Null",
          "__Unused63": "Null",
          "__Unused64": "Null",
          "__Unused65": "Null",
          "__Unused66": "Null",
          "__Unused67": "Null",
          "__Unused68": "Null",
          "__Unused69": "Null",
          "__Unused70": "Null",
          "__Unused71": "Null",
          "__Unused72": "Null",
          "__Unused73": "Null",
          "__Unused74": "Null",
          "__Unused75": "Null",
          "__Unused76": "Null",
          "__Unused77": "Null",
          "__Unused78": "Null",
          "__Unused79": "Null",
          "__Unused80": "Null",
          "__Unused81": "Null",
          "__Unused82": "Null",
          "__Unused83": "Null",
          "__Unused84": "Null",
          "__Unused85": "Null",
          "__Unused86": "Null",
          "__Unused87": "Null",
          "__Unused88": "Null",
          "__Unused89": "Null",
          "__Unused90": "Null",
          "__Unused91": "Null",
          "__Unused92": "Null",
          "__Unused93": "Null",
          "__Unused94": "Null",
          "__Unused95": "Null",
          "__Unused96": "Null",
          "__Unused97": "Null",
          "__Unused98": "Null",
          "__Unused99": "Null",
          "__Unused100": "Null",
          "Ethereum": "PalletEthereumRawOrigin"
        }
      },
      "FrameSupportDispatchRawOrigin": {
        "_enum": {
          "Root": "Null",
          "Signed": "AccountId32",
          "None": "Null"
        }
      },
      "PalletXcmOrigin": {
        "_enum": {
          "Xcm": "XcmV1MultiLocation",
          "Response": "XcmV1MultiLocation"
        }
      },
      "CumulusPalletXcmOrigin": {
        "_enum": {
          "Relay": "Null",
          "SiblingParachain": "u32"
        }
      },
      "PalletEthereumRawOrigin": {
        "_enum": {
          "EthereumTransaction": "H160"
        }
      },
      "SpCoreVoid": "Null",
      "PalletUniqueSchedulerError": {
        "_enum": [
          "FailedToSchedule",
          "NotFound",
          "TargetBlockNumberInPast",
          "RescheduleNoChange"
        ]
      },
      "UpDataStructsCollection": {
        "owner": "AccountId32",
        "mode": "UpDataStructsCollectionMode",
        "name": "Vec<u16>",
        "description": "Vec<u16>",
        "tokenPrefix": "Bytes",
        "sponsorship": "UpDataStructsSponsorshipState",
        "limits": "UpDataStructsCollectionLimits",
        "permissions": "UpDataStructsCollectionPermissions",
        "externalCollection": "bool"
      },
      "UpDataStructsSponsorshipState": {
        "_enum": {
          "Disabled": "Null",
          "Unconfirmed": "AccountId32",
          "Confirmed": "AccountId32"
        }
      },
      "UpDataStructsProperties": {
        "map": "UpDataStructsPropertiesMapBoundedVec",
        "consumedSpace": "u32",
        "spaceLimit": "u32"
      },
      "UpDataStructsPropertiesMapBoundedVec": "BTreeMap<Bytes, Bytes>",
      "UpDataStructsPropertiesMapPropertyPermission": "BTreeMap<Bytes, UpDataStructsPropertyPermission>",
      "UpDataStructsCollectionStats": {
        "created": "u32",
        "destroyed": "u32",
        "alive": "u32"
      },
      "UpDataStructsTokenChild": {
        "token": "u32",
        "collection": "u32"
      },
      "PhantomTypeUpDataStructs": "[(UpDataStructsTokenData,UpDataStructsRpcCollection,RmrkTraitsCollectionCollectionInfo,RmrkTraitsNftNftInfo,RmrkTraitsResourceResourceInfo,RmrkTraitsPropertyPropertyInfo,RmrkTraitsBaseBaseInfo,RmrkTraitsPartPartType,RmrkTraitsTheme,RmrkTraitsNftNftChild);0]",
      "UpDataStructsTokenData": {
        "properties": "Vec<UpDataStructsProperty>",
        "owner": "Option<PalletEvmAccountBasicCrossAccountIdRepr>"
      },
      "UpDataStructsRpcCollection": {
        "owner": "AccountId32",
        "mode": "UpDataStructsCollectionMode",
        "name": "Vec<u16>",
        "description": "Vec<u16>",
        "tokenPrefix": "Bytes",
        "sponsorship": "UpDataStructsSponsorshipState",
        "limits": "UpDataStructsCollectionLimits",
        "permissions": "UpDataStructsCollectionPermissions",
        "tokenPropertyPermissions": "Vec<UpDataStructsPropertyKeyPermission>",
        "properties": "Vec<UpDataStructsProperty>",
        "readOnly": "bool"
      },
      "RmrkTraitsCollectionCollectionInfo": {
        "issuer": "AccountId32",
        "metadata": "Bytes",
        "max": "Option<u32>",
        "symbol": "Bytes",
        "nftsCount": "u32"
      },
      "RmrkTraitsNftNftInfo": {
        "owner": "RmrkTraitsNftAccountIdOrCollectionNftTuple",
        "royalty": "Option<RmrkTraitsNftRoyaltyInfo>",
        "metadata": "Bytes",
        "equipped": "bool",
        "pending": "bool"
      },
      "RmrkTraitsNftRoyaltyInfo": {
        "recipient": "AccountId32",
        "amount": "Permill"
      },
      "RmrkTraitsResourceResourceInfo": {
        "id": "u32",
        "resource": "RmrkTraitsResourceResourceTypes",
        "pending": "bool",
        "pendingRemoval": "bool"
      },
      "RmrkTraitsPropertyPropertyInfo": {
        "key": "Bytes",
        "value": "Bytes"
      },
      "RmrkTraitsBaseBaseInfo": {
        "issuer": "AccountId32",
        "baseType": "Bytes",
        "symbol": "Bytes"
      },
      "RmrkTraitsNftNftChild": {
        "collectionId": "u32",
        "nftId": "u32"
      },
      "PalletCommonError": {
        "_enum": [
          "CollectionNotFound",
          "MustBeTokenOwner",
          "NoPermission",
          "CantDestroyNotEmptyCollection",
          "PublicMintingNotAllowed",
          "AddressNotInAllowlist",
          "CollectionNameLimitExceeded",
          "CollectionDescriptionLimitExceeded",
          "CollectionTokenPrefixLimitExceeded",
          "TotalCollectionsLimitExceeded",
          "CollectionAdminCountExceeded",
          "CollectionLimitBoundsExceeded",
          "OwnerPermissionsCantBeReverted",
          "TransferNotAllowed",
          "AccountTokenLimitExceeded",
          "CollectionTokenLimitExceeded",
          "MetadataFlagFrozen",
          "TokenNotFound",
          "TokenValueTooLow",
          "ApprovedValueTooLow",
          "CantApproveMoreThanOwned",
          "AddressIsZero",
          "UnsupportedOperation",
          "NotSufficientFounds",
          "UserIsNotAllowedToNest",
          "SourceCollectionIsNotAllowedToNest",
          "CollectionFieldSizeExceeded",
          "NoSpaceForProperty",
          "PropertyLimitReached",
          "PropertyKeyIsTooLong",
          "InvalidCharacterInPropertyKey",
          "EmptyPropertyKey",
          "CollectionIsExternal",
          "CollectionIsInternal"
        ]
      },
      "PalletFungibleError": {
        "_enum": [
          "NotFungibleDataUsedToMintFungibleCollectionToken",
          "FungibleItemsHaveNoId",
          "FungibleItemsDontHaveData",
          "FungibleDisallowsNesting",
          "SettingPropertiesNotAllowed"
        ]
      },
      "PalletRefungibleItemData": {
        "constData": "Bytes"
      },
      "PalletRefungibleError": {
        "_enum": [
          "NotRefungibleDataUsedToMintFungibleCollectionToken",
          "WrongRefungiblePieces",
          "RepartitionWhileNotOwningAllPieces",
          "RefungibleDisallowsNesting",
          "SettingPropertiesNotAllowed"
        ]
      },
      "PalletNonfungibleItemData": {
        "owner": "PalletEvmAccountBasicCrossAccountIdRepr"
      },
      "UpDataStructsPropertyScope": {
        "_enum": [
          "None",
          "Rmrk"
        ]
      },
      "PalletNonfungibleError": {
        "_enum": [
          "NotNonfungibleDataUsedToMintFungibleCollectionToken",
          "NonfungibleItemsHaveNoAmount",
          "CantBurnNftWithChildren"
        ]
      },
      "PalletStructureError": {
        "_enum": [
          "OuroborosDetected",
          "DepthLimit",
          "BreadthLimit",
          "TokenNotFound"
        ]
      },
      "PalletRmrkCoreError": {
        "_enum": [
          "CorruptedCollectionType",
          "NftTypeEncodeError",
          "RmrkPropertyKeyIsTooLong",
          "RmrkPropertyValueIsTooLong",
          "RmrkPropertyIsNotFound",
          "UnableToDecodeRmrkData",
          "CollectionNotEmpty",
          "NoAvailableCollectionId",
          "NoAvailableNftId",
          "CollectionUnknown",
          "NoPermission",
          "NonTransferable",
          "CollectionFullOrLocked",
          "ResourceDoesntExist",
          "CannotSendToDescendentOrSelf",
          "CannotAcceptNonOwnedNft",
          "CannotRejectNonOwnedNft",
          "CannotRejectNonPendingNft",
          "ResourceNotPending",
          "NoAvailableResourceId"
        ]
      },
      "PalletRmrkEquipError": {
        "_enum": [
          "PermissionError",
          "NoAvailableBaseId",
          "NoAvailablePartId",
          "BaseDoesntExist",
          "NeedsDefaultThemeFirst",
          "PartDoesntExist",
          "NoEquippableOnFixedPart"
        ]
      },
      "PalletEvmError": {
        "_enum": [
          "BalanceLow",
          "FeeOverflow",
          "PaymentOverflow",
          "WithdrawFailed",
          "GasPriceTooLow",
          "InvalidNonce"
        ]
      },
      "FpRpcTransactionStatus": {
        "transactionHash": "H256",
        "transactionIndex": "u32",
        "from": "H160",
        "to": "Option<H160>",
        "contractAddress": "Option<H160>",
        "logs": "Vec<EthereumLog>",
        "logsBloom": "EthbloomBloom"
      },
      "EthbloomBloom": "[u8;256]",
      "EthereumReceiptReceiptV3": {
        "_enum": {
          "Legacy": "EthereumReceiptEip658ReceiptData",
          "EIP2930": "EthereumReceiptEip658ReceiptData",
          "EIP1559": "EthereumReceiptEip658ReceiptData"
        }
      },
      "EthereumReceiptEip658ReceiptData": {
        "statusCode": "u8",
        "usedGas": "U256",
        "logsBloom": "EthbloomBloom",
        "logs": "Vec<EthereumLog>"
      },
      "EthereumBlock": {
        "header": "EthereumHeader",
        "transactions": "Vec<EthereumTransactionTransactionV2>",
        "ommers": "Vec<EthereumHeader>"
      },
      "EthereumHeader": {
        "parentHash": "H256",
        "ommersHash": "H256",
        "beneficiary": "H160",
        "stateRoot": "H256",
        "transactionsRoot": "H256",
        "receiptsRoot": "H256",
        "logsBloom": "EthbloomBloom",
        "difficulty": "U256",
        "number": "U256",
        "gasLimit": "U256",
        "gasUsed": "U256",
        "timestamp": "u64",
        "extraData": "Bytes",
        "mixHash": "H256",
        "nonce": "EthereumTypesHashH64"
      },
      "EthereumTypesHashH64": "[u8;8]",
      "PalletEthereumError": {
        "_enum": [
          "InvalidSignature",
          "PreLogExists"
        ]
      },
      "PalletEvmCoderSubstrateError": {
        "_enum": [
          "OutOfGas",
          "OutOfFund"
        ]
      },
      "PalletEvmContractHelpersSponsoringModeT": {
        "_enum": [
          "Disabled",
          "Allowlisted",
          "Generous"
        ]
      },
      "PalletEvmContractHelpersError": {
        "_enum": [
          "NoPermission"
        ]
      },
      "PalletEvmMigrationError": {
        "_enum": [
          "AccountNotEmpty",
          "AccountIsNotMigrating"
        ]
      },
      "SpRuntimeMultiSignature": {
        "_enum": {
          "Ed25519": "SpCoreEd25519Signature",
          "Sr25519": "SpCoreSr25519Signature",
          "Ecdsa": "SpCoreEcdsaSignature"
        }
      },
      "SpCoreEd25519Signature": "[u8;64]",
      "SpCoreSr25519Signature": "[u8;64]",
      "SpCoreEcdsaSignature": "[u8;65]",
      "FrameSystemExtensionsCheckSpecVersion": "Null",
      "FrameSystemExtensionsCheckGenesis": "Null",
      "FrameSystemExtensionsCheckNonce": "Compact<u32>",
      "FrameSystemExtensionsCheckWeight": "Null",
      "PalletTemplateTransactionPaymentChargeTransactionPayment": "Compact<u128>",
      "QuartzRuntimeRuntime": "Null",
      "PalletEthereumFakeTransactionFinalizer": "Null"
    },
    "rpc": {}
  }
}